{\rtf1\ansi\ansicpg1252\cocoartf1561\cocoasubrtf600
{\fonttbl\f0\fnil\fcharset0 .SFNSText-Bold;\f1\fnil\fcharset0 HelveticaNeue;\f2\fnil\fcharset0 .SFNSText;
}
{\colortbl;\red255\green255\blue255;\red27\green31\blue34;\red255\green255\blue255;}
{\*\expandedcolortbl;;\cssrgb\c14118\c16078\c18039;\cssrgb\c100000\c100000\c100000;}
\paperw11900\paperh16840\margl1440\margr1440\vieww10800\viewh8400\viewkind0
\deftab720
\pard\pardeftab720\sl360\partightenfactor0

\f0\b\fs32 \cf2 \cb3 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 Q. What does the\'a0
\f1\i word
\f0\i0 \'a0'polymorphism' mean?
\f1\b0 \
\

\f2 A. The ability for something to take multiple form.\
\

\f0\b Q. What does it mean when we apply polymorphism to OO design? Give a simple Java example.\
\

\f2\b0 A. Polymorphism in OO is allowing a class to be treated as if they were another class. In Java, this would be done via interfaces (each class that \'91implements\'92 it can be passed as that interface) and inheritance (a child can be treated as a type of its parent)\
\

\b Q. 
\f0 What can we use to implement polymorphism in Java?\
\

\f2\b0 A. Inheritance and interfaces. Using a combination of them allows a class to \'91morph\'92 into multiple types. To access the methods of a different class we can then type cast the object into any of its other forms.\
\

\b Q. 
\f0 How many 'forms' can an object take when using polymorphism?\
\

\f2\b0 A. 1024.\
\

\b Q. 
\f0 Give an example of when you could use polymorphism.\
\

\f2\b0 A. When you want to store more than one type in a single ArrayList. Giving it a common \'91type\'92, through use of an interface, and then passing each object into the ArrayList as that interface type\
\

\b Q. 
\f0 What do we mean by 'composition' in reference to object-oriented programming?\
\

\f2\b0 A. Composition is the way we can combine different classes together, using interfaces, to make them more complex.
\f0\b \
\
Q. When would you use composition? Provide a simple example in Java.\
\

\f2\b0 A. If we had several currently unrelated sub-classes that shared traits it didn\'92t with its sisters/brothers. In Java, we\'92d create an interface that would only be implemented on those specific sub-classes.
\f0\b \
\
Q. What is/are the advantage(s) of using composition?\
\

\f2\b0 A. The advantages is more selective grouping; in the above example, we couldn\'92t simply change the parent class as it would also affect sub-classes that we didn\'92t want to change. Using composition, we can target individual subclasses and give them the same behaviours
\f0\b \
\
Q. What happens to the behaviours when the object composed of them is destroyed?\
\

\f2\b0 A. They still remain on the interface?\
\
(sorry, I\'92m not sure what this question is asking me)}